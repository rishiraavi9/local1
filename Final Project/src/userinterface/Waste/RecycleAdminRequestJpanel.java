/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Waste;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.RecycleAdminOrganization;
import Business.Organization.RecycleWorkerOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WasteWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RishikRaavi
 */
public class RecycleAdminRequestJpanel extends javax.swing.JPanel {

    /**
     * Creates new form RecycleAdminRequestJpanel
     */java.util.Date date = new java.util.Date(); 
    Date timeStamp = new Timestamp(date.getTime());
    
    JPanel userProcessContainer; UserAccount account; RecycleAdminOrganization recycleAdminOrganization; Enterprise enterprise;
    public RecycleAdminRequestJpanel(JPanel userProcessContainer, UserAccount account, RecycleAdminOrganization recycleAdminOrganization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.account=account;
        this.recycleAdminOrganization=recycleAdminOrganization;
         populateWorkRequestTable();
    }
public void  populateWorkRequestTable(){
DefaultTableModel model = (DefaultTableModel) tblWorkRequest.getModel();
        model.setRowCount(0);
        
            for(WorkRequest request : recycleAdminOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[7];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getStatus();
            row[3] = ((WasteWorkRequest) request).getEmerLevel();
            row[4] = ((WasteWorkRequest) request).getTotalWaste();
            row[5] = ((WasteWorkRequest) request).getResult();
            row[6] = ((WasteWorkRequest) request).getSentDate();
            
            model.addRow(row);
        }


}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtAcTakenDt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkRequest = new javax.swing.JTable();
        txtResult = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnSubmitResult = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Action to be taken");
        jLabel4.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 51));
        jLabel1.setText("Manage Recycle AdminWork Request");

        txtAcTakenDt.setEditable(false);

        tblWorkRequest.setBackground(new java.awt.Color(153, 255, 255));
        tblWorkRequest.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        tblWorkRequest.setForeground(new java.awt.Color(51, 0, 255));
        tblWorkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location", "Sender", "Status", "Emergency Level", "Total Waste (Tons)", "Action To Be Taken", "Sent Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblWorkRequest);

        txtResult.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Action taken Date");
        jLabel2.setToolTipText("");

        jButton1.setBackground(new java.awt.Color(0, 204, 51));
        jButton1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jButton1.setText("Assign Request To Me");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(0, 204, 51));
        btnBack.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSubmitResult.setBackground(new java.awt.Color(0, 204, 51));
        btnSubmitResult.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnSubmitResult.setText("Submit Result");
        btnSubmitResult.setEnabled(false);
        btnSubmitResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAcTakenDt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140)))
                .addGap(35, 35, 35))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSubmitResult)
                                    .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtAcTakenDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSubmitResult)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblWorkRequest.getModel();
        int selectedRow = tblWorkRequest.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row to assign the request",
                "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        else{
            String statusFlag = (String)model.getValueAt(selectedRow, 2);
            if(statusFlag.equals("Completed") || statusFlag.equals("Sent to Recycle Worker")){
                JOptionPane.showMessageDialog(null,"The work request cant be assigned as it is completed / Sent to recycle Worker ");
                return;
            }

            WasteWorkRequest hosprequest = (WasteWorkRequest)tblWorkRequest.getValueAt(selectedRow, 0);
            hosprequest.setReceiver(account);
            hosprequest.setStatus("Pending For Recycling");
            populateWorkRequestTable();
            btnSubmitResult.setEnabled(true);
            JOptionPane.showMessageDialog(null, "Request assigned to you successfully",
                "Information",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSubmitResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitResultActionPerformed

        DefaultTableModel model = (DefaultTableModel) tblWorkRequest.getModel();

        int selectedRow = tblWorkRequest.getSelectedRow();

        if (selectedRow >= 0){

            String statusFlag = (String)model.getValueAt(selectedRow, 2);
if(statusFlag.equals("Sent to Recycle Admin") || statusFlag.equals("Completed") ){
                JOptionPane.showMessageDialog(null,"The work request cant be pushed as it is sent to Recycle Admin/Completed");
                return;
            }
            
            else if(statusFlag.equals("Sent to Recycle Worker")){
                JOptionPane.showMessageDialog(null,"The work request cant be pushed as it is sent to Recycle Worker");
                return;
            }

            else if(txtResult.getText() == null || txtResult.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null,"Action to be taken cannot be blank");
                return;
            }
            else{

                WasteWorkRequest request = (WasteWorkRequest)(WorkRequest)tblWorkRequest.getValueAt(selectedRow, 0);

               
                request.setResult(txtResult.getText());
                request.setStatus("Sent to Recycle Worker");
                request.setProcessDate(timeStamp);

                txtAcTakenDt.setText(timeStamp.toString());

                populateWorkRequestTable();

                //push data to Recycle Worker

                WasteWorkRequest wt = (WasteWorkRequest)model.getValueAt(selectedRow, 0);

                String message = wt.getMessage();

                wt.setMessage(message);
                wt.setSender(account);
                wt.setStatus("Sent to Recycle Worker");
                wt.setEmerLevel(wt.getEmerLevel());
                wt.setTotalWaste(wt.getTotalWaste());
                wt.setZipCode(wt.getZipCode());
                wt.setProcessDate(timeStamp);

                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (organization instanceof RecycleWorkerOrganization){
                        org = organization;
                        break;
                    }
                }
                if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(request);
                    account.getWorkQueue().getWorkRequestList().add(request);

                }

                JOptionPane.showMessageDialog(null, "Request sent to Recycle Worker",
                    "Information",JOptionPane.INFORMATION_MESSAGE);

            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a row to submit the request",
                "Warning",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSubmitResultActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmitResult;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblWorkRequest;
    private javax.swing.JTextField txtAcTakenDt;
    private javax.swing.JTextField txtResult;
    // End of variables declaration//GEN-END:variables
}
