/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ParkingWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RishikRaavi
 */
public class ManageParkingUserAccountsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageParkingUserAccountsJPanel
     */
    JPanel userProcessContainer; UserAccount account; Organization organization; Enterprise enterprise;EcoSystem business;
    public ManageParkingUserAccountsJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise,EcoSystem business) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.organization=organization;
        this.enterprise=enterprise;
        this.business=business;
        popOrganizationComboBox();
        popData();
    }
public void popOrganizationComboBox(){
 organizationComboBox.removeAllItems();

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            
            organizationComboBox.addItem(organization);
        }

}
public void popData(){

DefaultTableModel model = (DefaultTableModel) userJTable.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                Object row[] = new Object[3];
                row[0] = ua;
                row[1] = ua.getRole();
                row[2]=  ua.getEmployee().getArea();
                ((DefaultTableModel) userJTable.getModel()).addRow(row);
            }
        }
   
   

}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userJTable = new javax.swing.JTable();
        pwdText = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        organizationComboBox = new javax.swing.JComboBox();
        empComboBox = new javax.swing.JComboBox();
        rolejComboBox = new javax.swing.JComboBox();
        userNameText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        userJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "User Name", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userJTable);

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Organization");

        backButton.setText(">>Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Employee");

        jLabel3.setText("Role");

        jLabel4.setText("User Name");

        jLabel5.setText("Password");

        organizationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        organizationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationComboBoxActionPerformed(evt);
            }
        });

        empComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        empComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empComboBoxActionPerformed(evt);
            }
        });

        rolejComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        rolejComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rolejComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Parking UserAccount:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(101, 101, 101)
                                    .addComponent(rolejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(76, 76, 76)
                                    .addComponent(empComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(61, 61, 61)
                                    .addComponent(organizationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(70, 70, 70)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(userNameText)
                                    .addComponent(pwdText, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(239, 239, 239)
                        .addComponent(createButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(organizationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(empComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(rolejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(userNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pwdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(backButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:
       String userName = userNameText.getText();
        String password = pwdText.getText();

        if(userName == null || userName.trim().equals("")){
             JOptionPane.showMessageDialog(null, "Username cannot be blank",
                 "Warning",JOptionPane.WARNING_MESSAGE);
         
            return;
        }
         
         else if(!isAlpha(userName)){
             JOptionPane.showMessageDialog(null, "Only numbers are not allowed",
                 "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
         else if(password == null || password.trim().equals("")){
             JOptionPane.showMessageDialog(null, "Password cannot be blank",
                 "Warning",JOptionPane.WARNING_MESSAGE);
         
            return;
        }
         
         else if(!isAlpha(password)){
             JOptionPane.showMessageDialog(null, "Only numbers are not allowed",
                 "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
         else{
             
        Organization organization = (Organization) organizationComboBox.getSelectedItem();
        Employee employee = (Employee) empComboBox.getSelectedItem();
        Role role = (Role) rolejComboBox.getSelectedItem();
        if(organization == null || employee ==  null || role == null){
        JOptionPane.showMessageDialog(null, "Please create an Organization/Employee/Role",
                 "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        else{
            for(Network network:business.getNetworkList()){
             for (Enterprise entType : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (entType != null) {
                if (!entType.getUserAccountDirectory().checkIfUsernameIsUnique(userName)) {
                    JOptionPane.showMessageDialog(this, "User Name Already Exists", "Create User", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                for (Organization orgType : entType.getOrganizationDirectory().getOrganizationList()) {
                    if (orgType != null) {
                        if (!orgType.getUserAccountDirectory().checkIfUsernameIsUnique(userName)) {
                            JOptionPane.showMessageDialog(this, "User Name Already Exists", "Create User", JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                        for (UserAccount UA : orgType.getUserAccountDirectory().getUserAccountList()) {
                            if (UA.getUsername().equalsIgnoreCase(userName)) {
                                JOptionPane.showMessageDialog(this, "User Name Already Exists", "Create User", JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }
                    }
                }

            }
        }}
            
         if(organization.getUserAccountDirectory().checkIfUsernameIsUnique(userName)) {  
        organization.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
        
        popData();
        
        JOptionPane.showMessageDialog(null, "User Account Created Successfully");
            }
        else{
         JOptionPane.showMessageDialog(null, "Account duplication occured",
                 "Warning",JOptionPane.WARNING_MESSAGE);   
            }
           }
         }
    }//GEN-LAST:event_createButtonActionPerformed
public boolean isAlpha(String name) 
    {
    char[] chars = name.toCharArray();

    for (char c : chars) {
        if(Character.isLetter(c)) {
            return true;
        }
    }
     return false;
    }
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
         userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer); 
    }//GEN-LAST:event_backButtonActionPerformed

    private void organizationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationComboBoxActionPerformed
        // TODO add your handling code here:
         Organization organization = (Organization)organizationComboBox.getSelectedItem();
        if(organization!=null){
        populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
        }
    }//GEN-LAST:event_organizationComboBoxActionPerformed
public void populateEmployeeComboBox(Organization organization){
        empComboBox.removeAllItems();
        
        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()){
            empComboBox.addItem(employee);
        }
    }
    private void populateRoleComboBox(Organization organization){
        rolejComboBox.removeAllItems();
        for (Role role : organization.getSupportedRole()){
            rolejComboBox.addItem(role);
        }
    }
    private void empComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empComboBoxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_empComboBoxActionPerformed

    private void rolejComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rolejComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rolejComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton createButton;
    private javax.swing.JComboBox empComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox organizationComboBox;
    private javax.swing.JTextField pwdText;
    private javax.swing.JComboBox rolejComboBox;
    private javax.swing.JTable userJTable;
    private javax.swing.JTextField userNameText;
    // End of variables declaration//GEN-END:variables
}
