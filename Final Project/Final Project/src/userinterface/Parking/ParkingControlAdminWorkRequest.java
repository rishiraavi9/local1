
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Parking;

import Business.Enterprise.Enterprise;
import Business.Organization.ParkingControlAdminOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ParkingWorkRequest;
import Business.WorkQueue.PollutionWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import userinterface.Pollutiom.ManageWorkRequesarkingControlAdmin;

/**
 *
 * @author RishikRaavi
 */
public class ParkingControlAdminWorkRequest extends javax.swing.JPanel {

    /**
     * Creates new form ParkingControlAdminWorkRequest
     */
    JPanel userProcessContainer; UserAccount account; ParkingControlAdminOrganization parkingControlAdminOrganization; Enterprise enterprise;
    public ParkingControlAdminWorkRequest(JPanel userProcessContainer, UserAccount account, ParkingControlAdminOrganization parkingControlAdminOrganization, Enterprise enterprise) {
        initComponents();
        this.account=account;
        this.enterprise=enterprise;
        this.userProcessContainer=userProcessContainer;
        this.parkingControlAdminOrganization=parkingControlAdminOrganization;
        populateWorkRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        mapJText = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtResult = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Address = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jButton2.setText("Export to Sheet");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        processJButton.setText("Submit Result");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Assign Request To Me");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Result");

        jButton3.setText("View Map");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("Parking Control Admin Request");

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Address.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Receiver", "Message", "Status", "Result", "Address", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Address);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(refreshJButton)
                                .addGap(244, 244, 244)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(processJButton)
                                .addGap(80, 80, 80)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mapJText, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jLabel2)))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshJButton)
                    .addComponent(jButton3))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processJButton)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(mapJText, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addGap(126, 126, 126))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
try{        // TODO add your handling code here:
        HSSFWorkbook fWorkbook = new HSSFWorkbook();
                    HSSFSheet fSheet = fWorkbook.createSheet("new Sheet");
                    TreeMap<String,Object[]> data=new TreeMap<>();
      
                    HSSFFont sheetTitleFont = fWorkbook.createFont();
                    File file = new File(new File("").getAbsolutePath() + "/Parking.xls");
                    HSSFCellStyle cellStyle = fWorkbook.createCellStyle();

                    sheetTitleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
                    //sheetTitleFont.setColor();
                    TableModel model = Address.getModel();
                    TableColumnModel tcm = Address.getColumnModel();
                    HSSFRow fRow1 = fSheet.createRow((short) 0);

                

                    for (int i = 0; i < model.getRowCount(); i++) {
                      
                        HSSFRow fRow = fSheet.createRow((short)i);
 for (int j = 0; j < model.getColumnCount(); j++) {
                            HSSFCell cell = fRow.createCell((short) j);
                            cell.setCellValue(tcm.getColumn(j).getHeaderValue().toString());
                            cell.setCellValue(model.getValueAt(i, j).toString());
  cell.setCellStyle(cellStyle);

                        }

                    }
               try{ FileOutputStream fileOutputStream;
                fileOutputStream = new FileOutputStream(file);
                BufferedOutputStream bos = new BufferedOutputStream(fileOutputStream);
                fWorkbook.write(bos);
                bos.close();
             fileOutputStream.close();
 
                 }
               catch(Exception e){
               JOptionPane.showMessageDialog(null,"vvxcvxcv");
               }}
catch(Exception e){
JOptionPane.showMessageDialog(null,"Try again,File Location not proper to download Plz contact customer care");

}
              
    }//GEN-LAST:event_jButton2ActionPerformed
public void  populateWorkRequestTable(){
DefaultTableModel model = (DefaultTableModel) Address.getModel();
        model.setRowCount(0);
        
            for(WorkRequest request :parkingControlAdminOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getStatus();
            row[3] = request.getReceiver() == null ? "To be Assigned" : request.getReceiver().getEmployee().getName();
            row[4]=((ParkingWorkRequest) request).getAddress();
            row[5]=((ParkingWorkRequest) request).getTotalPrice();
            
            
            model.addRow(row);
        }
}
    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) Address.getModel();

        if(txtResult.getText().trim().isEmpty()){
        JOptionPane.showMessageDialog(null,"Plz Enter Result");
        return;
        }
        
        int selectedRow = Address.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row to submit the request",
                "Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{

            String assignedReceiver = (String)model.getValueAt(selectedRow, 2);

            if(assignedReceiver == null){
                JOptionPane.showMessageDialog(null, "Please assign a receiver",
                    "Warning",JOptionPane.WARNING_MESSAGE);

            }
            else{
                
                ParkingWorkRequest request = (ParkingWorkRequest)(WorkRequest)Address.getValueAt(selectedRow, 0);
                if(request.getStatus().equals("Sent")){
               JOptionPane.showMessageDialog(null, "Requested should be assigned first",
                    "Information",JOptionPane.INFORMATION_MESSAGE);
                return;
                }
                if(request.getStatus().equals("Completed")){
               JOptionPane.showMessageDialog(null, "Requested is already Completed",
                    "Information",JOptionPane.INFORMATION_MESSAGE);
                return;
                }
                

                request.setTestResult(txtResult.getText());
                request.setStatus("Completed");

                populateWorkRequestTable();

                JOptionPane.showMessageDialog(null, "Request completed successfully",
                    "Information",JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed

        int selectedRow = Address.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row to assign the request",
                "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest request = (WorkRequest)Address.getValueAt(selectedRow, 0);
        if(request.getStatus().equals("Pending")){
        
        JOptionPane.showMessageDialog(null, "Request is already Set to Pending ",
            "Information",JOptionPane.INFORMATION_MESSAGE);
        return;
        }
        if(request.getStatus().equals("Completed")){
        
        JOptionPane.showMessageDialog(null, "Request is already Set to Completed ",
            "Information",JOptionPane.INFORMATION_MESSAGE);
        return;
        }
        request.setReceiver(account);
        request.setStatus("Pending");
        populateWorkRequestTable();
       
        JOptionPane.showMessageDialog(null, "Request assigned to you successfully",
            "Information",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
int selectedRow = Address.getSelectedRow();
        
        
        if (selectedRow >= 0){
            
         ParkingWorkRequest request = (ParkingWorkRequest)(WorkRequest)Address.getValueAt(selectedRow, 0);
        String loc1 =request.getAddress();
        loc1 = loc1.replace(' ', '+');

        String marker1 = loc1;

        BufferedImage image;
        try {
            image = ImageIO.read(new URL("http://maps.googleapis.com/maps/api/staticmap?autoscale=1&size=400x400&maptype=roadmap&format=png&visual_refresh=true&markers=size:mid%7Ccolor:0xff0000%7Clabel:1%7C" + marker1));
            mapJText.setIcon(new ImageIcon(image));
        } catch (IOException ex) {
            Logger.getLogger(ManageWorkRequesarkingControlAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else{
        JOptionPane.showMessageDialog(null, "Please select a row to submit the request",
                    "Warning",JOptionPane.WARNING_MESSAGE); 
        
        
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Address;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mapJText;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField txtResult;
    // End of variables declaration//GEN-END:variables
}
