/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Pollutiom;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.PollutionControlAdmin;
import Business.Organization.PollutionControlAdminOrganization;
import Business.Organization.PollutionTrackerOrganization;
import Business.PollutionSensor.PollutionSensor;
import Business.Role.PollutionControlAdmin;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PollutionWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RishikRaavi
 */
public class PollutionTrackerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PollutionTrackerJPanel
     */
    private String rowFlag = "No";
    JPanel userProcessContainer;
    UserAccount userAccount;
    UserAccount account;
    PollutionTrackerOrganization pollutionTrackerOrganization;
    Enterprise enterprise;
    Role role;

    public PollutionTrackerJPanel(JPanel userProcessContainer, UserAccount userAccount, PollutionTrackerOrganization pollutionTrackerOrganization, Enterprise enterprise) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.pollutionTrackerOrganization = pollutionTrackerOrganization;
        this.enterprise = enterprise;
        populateWorkRequestTable();
        populateGasTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        cdJtext = new javax.swing.JTextField();
        coJText = new javax.swing.JTextField();
        cyJText = new javax.swing.JTextField();
        areaText = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        gasTable = new javax.swing.JTable();
        checkDanger = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        zipJText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setText(" Area");

        jLabel2.setText("Carbon Dioxide");

        jLabel3.setText("Carbon Monoxide");

        jLabel5.setText("Cyanide");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 102));
        jLabel6.setText("Enter Pollution Sensor Data:");

        jButton2.setBackground(new java.awt.Color(0, 153, 204));
        jButton2.setText("<<Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Area", "Carbon Dioxide", "Carbon Monoxide", "Cyanide", "Danger Level"
            }
        ));
        jScrollPane3.setViewportView(gasTable);

        checkDanger.setBackground(new java.awt.Color(0, 153, 204));
        checkDanger.setText("Check Danger Level ");
        checkDanger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDangerActionPerformed(evt);
            }
        });

        jLabel7.setText("Work Request");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Area", "Status", "Result", "Emergency Level", "CO2", "CO", "CN", "ZipCode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(workRequestJTable);

        jLabel8.setText("ZipCode");

        jLabel10.setText("Gases:");

        jLabel11.setText("Area Details:");

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Pollutiom/big-data-and-implications-on-platform-architecture-22-638.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(301, 301, 301)
                            .addComponent(checkDanger))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(70, 70, 70)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel7))
                        .addComponent(jButton2)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel5))
                                    .addGap(61, 61, 61)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cyJText, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(coJText, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cdJtext, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jLabel11)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel8))
                                    .addGap(52, 52, 52)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(areaText)
                                        .addComponent(zipJText, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel12)))
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jLabel4)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(areaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(zipJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cdJtext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(coJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cyJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)))
                .addComponent(checkDanger)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(0, 0, 0)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
public boolean isAlpha(String name) {
        char[] chars = name.toCharArray();

        for (char c : chars) {
            if (Character.isLetter(c)) {
                return true;
            }
        }
        return false;
    }

    private boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    private void checkDangerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDangerActionPerformed
        // TODO add your handling code here:
        String area = areaText.getText();
        String cd = cdJtext.getText();
        String cm = coJText.getText();
        String cy = cyJText.getText();
        String zipCode = zipJText.getText();

        if (area == null || area.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Area cannot be blank");
            return;
        } else if (!isAlpha(area)) {
            JOptionPane.showMessageDialog(null, "Please Enter Area in Alphabets ");
            return;
        } else if (cd == null || cd.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "CO2 cannot be blank");
            return;
        } else if (!isInteger(cd)) {
            JOptionPane.showMessageDialog(null, "Fileds should contain only numbers");
            return;
        } else if (Integer.parseInt(String.valueOf(cd)) <= 0) {
            JOptionPane.showMessageDialog(null, "Please Enter Positive Carbon Dioxide Value");
            return;
        } else if (cd.length() > 7) {
            JOptionPane.showMessageDialog(null, "Please Input Correct Cd Level");
            return;
        } else if (cm == null || cm.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "CM cannot be blank");
            return;
        } else if (!isInteger(cm)) {
            JOptionPane.showMessageDialog(null, "Fileds should contain only numbers");
            return;
        } else if (Integer.parseInt(String.valueOf(cm)) <= 0) {
            JOptionPane.showMessageDialog(null, "Please Enter Positive Carbon Monoxide Value");
            return;
        } else if (cm.length() > 7) {
            JOptionPane.showMessageDialog(null, "Please Input Correct Cm Level");
            return;
        } else if (cy == null || cy.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "CY cannot be blank");
            return;
        } else if (!isInteger(cy)) {
            JOptionPane.showMessageDialog(null, "Fileds should contain only numbers");
            return;
        } else if (Integer.parseInt(String.valueOf(cy)) <= 0) {
            JOptionPane.showMessageDialog(null, "Please Enter Positive Cyanide Value");
            return;
        } else if (cy.length() > 7) {
            JOptionPane.showMessageDialog(null, "Please Input Correct Cy Level");
            return;
        } else if (zipCode == null || zipCode.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Fields cannot be blank");
            return;
        } else if (!isInteger(zipCode)) {
            JOptionPane.showMessageDialog(null, "Fileds should contain only numbers");
            return;
        } else if (Integer.parseInt(String.valueOf(zipCode)) <= 0) {
            JOptionPane.showMessageDialog(null, "Zip Code cannot be Negative");
            return;
        } else if (zipCode.length() > 6) {
            JOptionPane.showMessageDialog(null, "Please Input Correct Zip");
            return;
        } else {

            String emergencyLevel;

            if (Integer.parseInt(cd) > 50
                    || Integer.parseInt(cm) > 50
                    || Integer.parseInt(cy) > 50) {
                emergencyLevel = "Emergency";
                // PlaySound();
            } else {
                emergencyLevel = "Normal";
            }

            PollutionSensor p = new PollutionSensor();

            p.setArea(area);
            p.setCarbonDioxide(Integer.parseInt(cd));
            p.setCarbonMonoxide(Integer.parseInt(cm));
            p.setCyanide(Integer.parseInt(cy));
            p.setEmergencyLevel(emergencyLevel);
            p.setZipCode(Integer.parseInt(zipCode));

            //userAccount.getEmployee().getPollutionSensorList().createPollutionRecord(area, cdlevel, cmlevel, cylevel, emergencyLevel);
            enterprise.getPollutionSensorList().createSensor(Integer.parseInt(cd), Integer.parseInt(cm), Integer.parseInt(cy), area, Integer.parseInt(zipCode), emergencyLevel);

            populateGasTable();
            JOptionPane.showMessageDialog(null, "Danger Level Recorded");
            SendToAdmin(p);
            areaText.setText("");
            cdJtext.setText("");
            coJText.setText("");
            cyJText.setText("");
            zipJText.setText("");

        }


    }//GEN-LAST:event_checkDangerActionPerformed
    public void SendToAdmin(PollutionSensor p) {
        
      
        String emerFlag = p.getEmergencyLevel();
        if (emerFlag.equals("Emergency")) {
           

            PollutionControlAdmin pr;
            String message = p.getArea();
           
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                    Role role = ua.getRole();
                    if (role instanceof PollutionControlAdmin) {
                        account = ua;
                    }
                }
            }
            PollutionWorkRequest pwr = new PollutionWorkRequest();
            p.setPolStatus("Recorded");
            pwr.setMessage(message);
            pwr.setSender(userAccount);
            pwr.setStatus("Sent");
            pwr.setReceiver(account);
            pwr.setEmerLevel(p.getEmergencyLevel());
            pwr.setCabonDioxide(p.getCarbonDioxide());
            pwr.setCarbonMonoxide(p.getCarbonMonoxide());
            pwr.setCyanide(p.getCyanide());
            pwr.setZipcode(p.getZipCode());

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof PollutionControlAdminOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {

                org.getWorkQueue().getWorkRequestList().add(pwr);
                userAccount.getWorkQueue().getWorkRequestList().add(pwr);

            }
            populateWorkRequestTable();
            populateGasTable();
            JOptionPane.showMessageDialog(null, "Pollution Department had been alerted to take necessary action");
        }

        

    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);         // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    public void populateWorkRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            if (userAccount.getWorkQueue().getWorkRequestList() != null) {
                Object[] row = new Object[8];
                row[0] = request;

                row[1] = request.getStatus();
                String result = ((PollutionWorkRequest) request).getTestResult();
                row[2] = result == null ? "Waiting" : result;
                String emLevel = ((PollutionWorkRequest) request).getEmerLevel();
                row[3] = emLevel;
                int carbonO2 = ((PollutionWorkRequest) request).getCabonDioxide();
                row[4] = carbonO2;
                int carbonO = ((PollutionWorkRequest) request).getCarbonMonoxide();
                row[5] = carbonO;
                int cyn = ((PollutionWorkRequest) request).getCyanide();
                row[6] = cyn;
                int zip = ((PollutionWorkRequest) request).getZipcode();
                row[7] = zip;

                model.addRow(row);
            }
        }
    }

    public void populateGasTable() {
        DefaultTableModel model = (DefaultTableModel) gasTable.getModel();
        model.setRowCount(0);
        if (enterprise.getPollutionSensorList().getPollutionSensorList() != null) {
            for (PollutionSensor p : enterprise.getPollutionSensorList().getPollutionSensorList()) {
                Object row[] = new Object[5];
                row[0] = p;
                row[1] = p.getCarbonDioxide();
                row[2] = p.getCarbonMonoxide();
                row[3] = p.getCyanide();
                row[4] = p.getEmergencyLevel();
               

                ((DefaultTableModel) gasTable.getModel()).addRow(row);
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField areaText;
    private javax.swing.JTextField cdJtext;
    private javax.swing.JButton checkDanger;
    private javax.swing.JTextField coJText;
    private javax.swing.JTextField cyJText;
    private javax.swing.JTable gasTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable workRequestJTable;
    private javax.swing.JTextField zipJText;
    // End of variables declaration//GEN-END:variables
}
