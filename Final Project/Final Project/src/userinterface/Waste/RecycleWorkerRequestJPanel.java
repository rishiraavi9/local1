/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Waste;

import Business.Enterprise.Enterprise;
import Business.Organization.RecycleWorkerOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PollutionWorkRequest;
import Business.WorkQueue.WasteWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.Pollutiom.ManageWorkRequesarkingControlAdmin;

/**
 *
 * @author RishikRaavi
 */
public class RecycleWorkerRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RecycleWorkerRequestJPanel
     */
    JPanel userProcessContainer; UserAccount account; RecycleWorkerOrganization recycleWorkerOrganization; Enterprise enterprise;
    public RecycleWorkerRequestJPanel(JPanel userProcessContainer, UserAccount account, RecycleWorkerOrganization recycleWorkerOrganization, Enterprise enterprise) {
        initComponents();
        this.enterprise=enterprise;
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.recycleWorkerOrganization=recycleWorkerOrganization;
        populateWorkRequestTable();
    }

    public void populateWorkRequestTable(){
     DefaultTableModel model = (DefaultTableModel) workRequestTbl.getModel();
        model.setRowCount(0);
        
            for(WorkRequest request : recycleWorkerOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getStatus();
            row[3] = ((WasteWorkRequest) request).getEmerLevel();
            row[4] = ((WasteWorkRequest) request).getTotalWaste();
            
            model.addRow(row);
        }
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestTbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtResult = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnSubmitResult = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        mapJText = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 51));
        jLabel1.setText("Manage Recycle Worker");

        workRequestTbl.setBackground(new java.awt.Color(153, 255, 255));
        workRequestTbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        workRequestTbl.setForeground(new java.awt.Color(51, 0, 255));
        workRequestTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location", "Sender", "Status", "Emergency Level", "Total Waste (Tons)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestTbl);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Action to be taken");
        jLabel2.setToolTipText("");

        txtResult.setToolTipText("");

        btnBack.setBackground(new java.awt.Color(0, 204, 51));
        btnBack.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSubmitResult.setBackground(new java.awt.Color(0, 204, 51));
        btnSubmitResult.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnSubmitResult.setText("Submit Result");
        btnSubmitResult.setEnabled(false);
        btnSubmitResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitResultActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 204, 51));
        jButton1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jButton1.setText("Assign Request To Me");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 204, 51));
        jButton2.setText("View Map");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addComponent(mapJText, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSubmitResult, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(215, 215, 215)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(314, 314, 314)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSubmitResult)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mapJText, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSubmitResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitResultActionPerformed

        DefaultTableModel model = (DefaultTableModel) workRequestTbl.getModel();

        int selectedRow = workRequestTbl.getSelectedRow();

        if (selectedRow >= 0){

            String statusFlag = (String)model.getValueAt(selectedRow, 2);

            if(statusFlag.equals("Sent to Recycle Worker") || statusFlag.equals("Completed") ){
                JOptionPane.showMessageDialog(null,"Request Already Completed Please Assign Another Request");
                return;
            }

            else if(txtResult.getText() == null || txtResult.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null,"Action to be taken cannot be blank");
                return;
            }
            else{

                WasteWorkRequest request = (WasteWorkRequest)(WorkRequest)workRequestTbl.getValueAt(selectedRow, 0);

              
                request.setResult(txtResult.getText());
                request.setStatus("Completed");
                populateWorkRequestTable();

                JOptionPane.showMessageDialog(null, "Request completed successfully",
                    "Information",JOptionPane.INFORMATION_MESSAGE);

            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a row to submit the request",
                "Warning",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSubmitResultActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) workRequestTbl.getModel();
        int selectedRow = workRequestTbl.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row to assign the request",
                "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        else{
            String statusFlag = (String)model.getValueAt(selectedRow, 2);
            if(statusFlag.equals("Completed")){
                JOptionPane.showMessageDialog(null,"The work request cant be assigned as it is completed");
                return;
            }

            WasteWorkRequest hosprequest = (WasteWorkRequest)workRequestTbl.getValueAt(selectedRow, 0);
            hosprequest.setReceiver(account);
            hosprequest.setStatus("Assigned to " + account);
            populateWorkRequestTable();
            btnSubmitResult.setEnabled(true);
            JOptionPane.showMessageDialog(null, "Request assigned to you successfully",
                "Information",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestTbl.getSelectedRow();
        
        
        if (selectedRow >= 0){
            
          WasteWorkRequest request = ( WasteWorkRequest)(WorkRequest)workRequestTbl.getValueAt(selectedRow, 0);
        String loc1 = String.valueOf(request.getZipCode());
            loc1 = loc1.replace(' ', '+');

            String marker1 = loc1;
     
BufferedImage image;
        try {
            image = ImageIO.read(new URL("http://maps.googleapis.com/maps/api/staticmap?autoscale=1&size=400x400&maptype=roadmap&format=png&visual_refresh=true&markers=size:mid%7Ccolor:0xff0000%7Clabel:1%7C" + marker1));
         mapJText.setIcon(new ImageIcon(image));
        } catch (IOException ex) {
            Logger.getLogger(ManageWorkRequesarkingControlAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
          }
        else{
        JOptionPane.showMessageDialog(null, "Please select a row to submit the request",
                    "Warning",JOptionPane.WARNING_MESSAGE); 
        
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmitResult;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mapJText;
    private javax.swing.JTextField txtResult;
    private javax.swing.JTable workRequestTbl;
    // End of variables declaration//GEN-END:variables
}
